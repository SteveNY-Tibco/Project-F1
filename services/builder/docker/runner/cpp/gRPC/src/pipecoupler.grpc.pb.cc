// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pipecoupler.proto

#include "pipecoupler.pb.h"
#include "pipecoupler.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace pipecoupler {

static const char* PipeCoupler_method_names[] = {
  "/pipecoupler.PipeCoupler/HandleData",
};

std::unique_ptr< PipeCoupler::Stub> PipeCoupler::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< PipeCoupler::Stub> stub(new PipeCoupler::Stub(channel));
  return stub;
}

PipeCoupler::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_HandleData_(PipeCoupler_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PipeCoupler::Stub::HandleData(::grpc::ClientContext* context, const ::pipecoupler::Data& request, ::pipecoupler::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HandleData_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pipecoupler::Reply>* PipeCoupler::Stub::AsyncHandleDataRaw(::grpc::ClientContext* context, const ::pipecoupler::Data& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipecoupler::Reply>::Create(channel_.get(), cq, rpcmethod_HandleData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipecoupler::Reply>* PipeCoupler::Stub::PrepareAsyncHandleDataRaw(::grpc::ClientContext* context, const ::pipecoupler::Data& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipecoupler::Reply>::Create(channel_.get(), cq, rpcmethod_HandleData_, context, request, false);
}

PipeCoupler::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PipeCoupler_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PipeCoupler::Service, ::pipecoupler::Data, ::pipecoupler::Reply>(
          std::mem_fn(&PipeCoupler::Service::HandleData), this)));
}

PipeCoupler::Service::~Service() {
}

::grpc::Status PipeCoupler::Service::HandleData(::grpc::ServerContext* context, const ::pipecoupler::Data* request, ::pipecoupler::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pipecoupler

